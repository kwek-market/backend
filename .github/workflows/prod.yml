name: Python CI

on:
  push:
    tags:
      - "v*"

jobs:
  tests_and_migration:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.11]
        postgres-version: ["15.10"]

    steps:
      # Step 1: Checkout code
      - uses: actions/checkout@v4

      # Step 2: Set up Python environment
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      # Step 3: Set up PostgreSQL databases
      - name: Set up PostgreSQL for migration check
        uses: harmon758/postgresql-action@v1
        with:
          postgresql version: ${{ matrix.postgres-version }}
          postgresql db: test_db
          postgresql user: test
          postgresql password: test

      - name: Add environment variables from .env
        run: |
          echo "${{ secrets.ENV_FILE }}" >> .env
          echo "DATABASE=test_db" >> .env
          echo "USER_NAME=test" >> .env
          echo "PASSWORD=test" >> .env
          echo "HOST=localhost" >> .env
          echo "DB_PORT=5432" >> .env
          echo "TEST_DATABASE=test_db" >> .env
          echo "TEST_USER=test" >> .env
          echo "TEST_PASSWORD=test" >> .env
          echo "TEST_HOST=localhost" >> .env
          echo "TEST_PORT=5432" >> .env

      # Step 6: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 7: Apply database migrations (if needed)
      - name: Apply migrations
        run: |
          python manage.py makemigrations bill market notifications users wallet
          python manage.py migrate

      # Step 8: Run tests
      - name: Run tests
        run: pytest  -v -s

        # Step 9: Remove env
      - name: remove .env
        run: |
          rm .env

  docker-build:
    runs-on: ubuntu-latest
    needs: tests_and_migration

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 4: Build and tag Docker image
      - name: Build Docker image
        run: |
          docker build --platform linux/amd64 -t ${{ secrets.DOCKER_USERNAME }}/kwek-backend:${{ github.sha }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/kwek-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/kwek-backend:${{ github.ref_name }}

      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/kwek-backend:${{ github.ref_name }}

  deploy:
    runs-on: ubuntu-latest
    needs: docker-build

    steps:
      - name: Deploy application via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          passphrase: ${{ secrets.SERVER_SSH_PASSPHRASE }}
          script: |
            cd prod/
            docker pull ${{ secrets.DOCKER_USERNAME }}/kwek-backend:${{ github.ref_name }}
            ./updateProdApiImage.sh '${{ github.ref_name }}'
            docker compose down kwek-backend
            docker compose up -d kwek-backend
            docker image prune -f
